/*
 * Authors: Haoyu Song and Dale Skrien
 * Date: Spring and Summer, 2018
 *
 * In the grammar below, the variables are enclosed in angle brackets.
 * The notation "::=" is used instead of "-->" to separate a variable from its rules.
 * The special character "|" is used to separate the rules for each variable.
 * All other symbols in the rules are terminals.
 * EMPTY indicates a rule with an empty right hand side.
 * All other terminal symbols that are in all caps correspond to keywords.
 */
package proj10DouglasHanssenMacDonaldZhang.bantam.parser;

import static proj10DouglasHanssenMacDonaldZhang.bantam.lexer.Token.Kind.*;
import proj10DouglasHanssenMacDonaldZhang.bantam.lexer.*;
import proj10DouglasHanssenMacDonaldZhang.bantam.util.*;
import proj10DouglasHanssenMacDonaldZhang.bantam.ast.*;
import proj10DouglasHanssenMacDonaldZhang.bantam.util.Error;


/**
 * This class constructs an AST from a legal Bantam Java program.  If the
 * program is illegal, then one or more error messages are displayed.
 */
public class Parser
{
    // instance variables
    private Scanner scanner;
    private Token currentToken; // the lookahead token
    private ErrorHandler errorHandler;
    private String filename;

    // constructor
    public Parser(ErrorHandler errorHandler) {
        this.errorHandler = errorHandler;
    }


    /**
     * parse the given file and return the root node of the AST
     * @param filename The name of the Bantam Java file to be parsed
     * @return The Program node forming the root of the AST generated by the parser
     */
    public Program parse(String filename) {
        this.filename = filename;
        return null;
    }


    /* 
     * <Program> ::= <Class> | <Class> <Program>
     */
    private Program parseProgram() {
        int position = currentToken.position;
        ClassList classList = new ClassList(position);

        while (currentToken.kind != EOF) {
            Class_ aClass = parseClass();
            classList.addElement(aClass);
        }

        return new Program(position, classList);
    }


    /*
	 * <Class> ::= CLASS <Identifier> <ExtendsClause> { <MemberList> }
     * <ExtendsClause> ::= EXTENDS <Identifier> | EMPTY
     * <MemberList> ::= EMPTY | <Member> <MemberList>
     */
    private Class_ parseClass() { return null;}


    /* Fields and Methods
     * <Member> ::= <Field> | <Method>
     * <Method> ::= <Type> <Identifier> ( <Parameters> ) <Block>
     * <Field> ::= <Type> <Identifier> <InitialValue> ;
     * <InitialValue> ::= EMPTY | = <Expression>
     */
     private Member parseMember() { return null;}


    //-----------------------------------

    /* Statements
     *  <Stmt> ::= <WhileStmt> | <ReturnStmt> | <BreakStmt> | <DeclStmt>
     *              | <ExpressionStmt> | <ForStmt> | <BlockStmt> | <IfStmt>
     */
     private Stmt parseStatement() {
            Stmt stmt;

            switch (currentToken.kind) {
                case IF:
                    stmt = parseIf();
                    break;
                case LCURLY:
                    stmt = parseBlock();
                    break;
                case VAR:
                    stmt = parseDeclStmt();
                    break;
                case RETURN:
                    stmt = parseReturn();
                    break;
                case FOR:
                    stmt = parseFor();
                    break;
                case WHILE:
                    stmt = parseWhile();
                    break;
                case BREAK:
                    stmt = parseBreak();
                    break;
                default:
                    stmt = parseExpressionStmt();
            }

            return stmt;
    }


    /*
     * <WhileStmt> ::= WHILE ( <Expression> ) <Stmt>
     */
    private Stmt parseWhile() { return null;}


    /*
     * <ReturnStmt> ::= RETURN <Expression> ; | RETURN ;
     */
	private Stmt parseReturn() { return null;}


    /*
	 * BreakStmt> ::= BREAK ;
     */
	private Stmt parseBreak() {return null; }


    /*
	 * <ExpressionStmt> ::= <Expression> ;
     */
	private ExprStmt parseExpressionStmt() {return null; }


    /*
	 * <DeclStmt> ::= VAR <Identifier> = <Expression> ;
     * every local variable must be initialized
     */
	private Stmt parseDeclStmt() { return null;}


    /*
	 * <ForStmt> ::= FOR ( <Start> ; <Terminate> ; <Increment> ) <STMT>
     * <Start>     ::= EMPTY | <Expression>
     * <Terminate> ::= EMPTY | <Expression>
     * <Increment> ::= EMPTY | <Expression>
     */
	private Stmt parseFor() {return null; }


    /*
	 * <BlockStmt> ::= { <Body> }
     * <Body> ::= EMPTY | <Stmt> <Body>
     */
	private Stmt parseBlock() { return null;}


    /*
	 * <IfStmt> ::= IF ( <Expr> ) <Stmt> | IF ( <Expr> ) <Stmt> ELSE <Stmt>
     */
	private Stmt parseIf() {return null; }


    //-----------------------------------------
    // Expressions
    //Here we introduce the precedence to operations

    /*
	 * <Expression> ::= <LogicalOrExpr> <OptionalAssignment>
     * <OptionalAssignment> ::= EMPTY | = <Expression>
     */
	private Expr parseExpression() { return null;}


    /*
	 * <LogicalOR> ::= <logicalAND> <LogicalORRest>
     * <LogicalORRest> ::= EMPTY |  || <LogicalAND> <LogicalORRest>
     */
	private Expr parseOrExpr() {
        int position = currentToken.position;

        Expr left = parseAndExpr();
        while (this.currentToken.spelling.equals("||")) {
            this.currentToken = scanner.scan();
            Expr right = parseAndExpr();
            left = new BinaryLogicOrExpr(position, left, right);
        }

        return left;
	}


    /*
	 * <LogicalAND> ::= <ComparisonExpr> <LogicalANDRest>
     * <LogicalANDRest> ::= EMPTY |  && <ComparisonExpr> <LogicalANDRest>
     */
	private Expr parseAndExpr() {return null; }


    /*
	 * <ComparisonExpr> ::= <RelationalExpr> <equalOrNotEqual> <RelationalExpr> |
     *                     <RelationalExpr>
     * <equalOrNotEqual> ::=  == | !=
     */
	private Expr parseEqualityExpr() {return null; }


    /*
	 * <RelationalExpr> ::=<AddExpr> | <AddExpr> <ComparisonOp> <AddExpr>
     * <ComparisonOp> ::=  < | > | <= | >= | INSTANCEOF
     */
	private Expr parseRelationalExpr() {return null; }


    /*
	 * <AddExpr>::Ôºù <MultExpr> <MoreMultExpr>
     * <MoreMultExpr> ::= EMPTY | + <MultExpr> <MoreMultExpr> | - <MultExpr> <MoreMultExpr>
     */
	private Expr parseAddExpr() { return null;}


    /*
	 * <MultiExpr> ::= <NewCastOrUnary> <MoreNCU>
     * <MoreNCU> ::= * <NewCastOrUnary> <MoreNCU> |
     *               / <NewCastOrUnary> <MoreNCU> |
     *               % <NewCastOrUnary> <MoreNCU> |
     *               EMPTY
     */
	private Expr parseMultExpr() {return null; }

    /*
	 * <NewCastOrUnary> ::= < NewExpression> | <CastExpression> | <UnaryPrefix>
     */
	private Expr parseNewCastOrUnary() {return null; }


    /*
	 * <NewExpression> ::= NEW <Identifier> ( ) | NEW <Identifier> [ <Expression> ]
     */
	private Expr parseNew() {return null; }


    /*
	 * <CastExpression> ::= CAST ( <Type> , <Expression> )
     */
	private Expr parseCast() { return null;}


    /*
	 * <UnaryPrefix> ::= <PrefixOp> <UnaryPrefix> | <UnaryPostfix>
     * <PrefixOp> ::= - | ! | ++ | --
     */
	private Expr parseUnaryPrefix() { return null;}


    /*
	 * <UnaryPostfix> ::= <Primary> <PostfixOp>
     * <PostfixOp> ::= ++ | -- | EMPTY
     */
	private Expr parseUnaryPostfix() { return null;}


    /*
	 * <Primary> ::= ( <Expression> ) | <IntegerConst> | <BooleanConst> |
     *                               <StringConst> | <VarExpr> | <DispatchExpr>
     * <VarExpr> ::= <VarExprPrefix> <Identifier> <VarExprSuffix>
     * <VarExprPrefix> ::= SUPER . | THIS . | EMPTY
     * <VarExprSuffix> ::= [ <Expr> ] | EMPTY
     * <DispatchExpr> ::= <DispatchExprPrefix> <Identifier> ( <Arguments> )
     * <DispatchExprPrefix> ::= <Primary> . | EMPTY
     */
	private Expr parsePrimary() {
        int position = currentToken.position;
        if( currentToken.kind == Token.Kind.LPAREN){
            Expr expr = parseExpression();
            if(currentToken.kind != Token.Kind.RPAREN){
                String message = "Missing right parenthesis";
	            notifyErrorHandler(new Error(Error.Kind.PARSE_ERROR, filename, position, message));
            }
            return expr;
        }
        else if(currentToken.kind == Token.Kind.INTCONST){
            return parseIntConst();
        }
        else if(currentToken.kind == Token.Kind.BOOLEAN){
            return parseBoolean();
        }
        else if(currentToken.kind == Token.Kind.STRCONST){
            return parseStringConst();
        }
        else if(currentToken.kind == Token.Kind.IDENTIFIER){
            return parseVarOrDispatchExpr();
        }

        else{
            return null;
        }

    }


    /*
     * <VarExpr> ::= <VarExprPrefix> <Identifier> <VarExprSuffix>
     * <VarExprPrefix> ::= SUPER . | THIS . | EMPTY
     * <VarExprSuffix> ::= [ <Expr> ] | EMPTY
     */
    private Expr parseVarOrDispatchExpr(){
        //First identifier will be "super" or "this" or neither
        // if neither, there is no prefix to the expression 
        if( (currentToken.spelling.equals("super")) || (currentToken.spelling.equals("this"))){
            return parseVarExprWithPrefix();
        }
        else{ //If not "super" or "this", then the prefix is empty, either an empty DispatchExprPrefix or empty VarExprPrefix. 
            return parseVarOrDispatchExprNoPrefix();
        }
    }
    
    private Expr parseVarExprWithPrefix() {
        String refVarName = currentToken.spelling;
        if ((scanner.scan()).kind != Token.Kind.DOT) { //"super" and "this" should both be followed by a dot
            String message = "Missing dot after reference name";
            notifyErrorHandler(new Error(Error.Kind.PARSE_ERROR, filename, currentToken.position, message));
            return null; //It throws an exception so returns nothing, the return is a moot pt but Java insists
        } else {
            currentToken = scanner.scan(); //Get the <identifier> after the dot
            String varName = parseVarOrDispatchIdentifier(); //How do I convert an id into an expression for ref?
            int position = currentToken.position;
            VarExpr referenceVar = new VarExpr(position, null, refVarName);
            Expr arrayIdx = parseVarSuffix(); //I don't know what to do with this, I think it's an array index
            if (arrayIdx != null) {
                return new ArrayExpr(position, referenceVar, varName, arrayIdx);
            } else {
                return new VarExpr(position, referenceVar, varName);
            }
        }
    }

    private String parseVarOrDispatchIdentifier(){
        if(currentToken.kind != Token.Kind.IDENTIFIER){
            String message = "Missing name of variable";
            notifyErrorHandler(new Error(Error.Kind.PARSE_ERROR, filename, currentToken.position, message));
            return null; //It throws an exception
        }
        else {
            return parseIdentifier(); //How do I convert an id into an expression for ref?
        }

    }
    
    private Expr parseVarOrDispatchExprNoPrefix(){
        String varName = parseIdentifier();
        Expr arrayIdx = parseVarSuffix(); //I don't know what to do with this, I think it's an array index
        int position = currentToken.position;
        if((currentToken = scanner.scan()).kind == Token.Kind.LPAREN) { //Then it's a DispatchExpr
            ExprList args = processDispatchArgs();
            return new DispatchExpr(position, arrayIdx, varName, args);
        }
        else{ //It's a VarExpr
            if(arrayIdx != null ){
                return new ArrayExpr(position, null, varName, arrayIdx);
            }
            else{
                return new VarExpr(position, null, varName);
            }
        }

    }

    /*
    * <VarExprSuffix> ::= [ <Expr> ] | EMPTY
    */
    private Expr parseVarSuffix(){
        //Move onto the suffix, which is either empty or has an expression in brackets. 
        //I think [Expr] represents indexing into an array
        //If next token is not [, since it's been stored in currentToken, it shouldn't be lost
        if((currentToken = scanner.scan()).spelling.equals("[")){
            currentToken = scanner.scan();
            Expr expr = parseExpression();
            return expr;
        }
        else{
            return null;
        }
    }


    

    /*
    * Handles the case that it is a dispatch expression by handling its args
    * If not dispatch expression, will move the scanner onto the next token
    * <DispatchExpr> ::= <DispatchExprPrefix> <Identifier> ( <Arguments> )
    */
    private ExprList processDispatchArgs(){
            ExprList args = parseArguments(); //I don't know what to do with the arguments either
            if(scanner.scan().kind != Token.Kind.RPAREN) { //If it's not, then don't need to save the token anyways cause throw exception
                String message = "Missing right parenthesis";
	            notifyErrorHandler(new Error(Error.Kind.PARSE_ERROR, filename, currentToken.position, message));
            }
            return args;
    }



    /*
	 * <Arguments> ::= EMPTY | <Expression> <MoreArgs>
     * <MoreArgs>  ::= EMPTY | , <Expression> <MoreArgs>
     */
	private ExprList parseArguments() {
	    if(currentToken.kind != Token.Kind.IDENTIFIER) return null;
	    int position = currentToken.position;
	    ExprList argList = new ExprList(position);
        Expr argExpression = parseExpression();
        argList.addElement(argExpression);
	    while(currentToken.kind == Token.Kind.COMMA){
	        argExpression = parseExpression();
	        argList.addElement(argExpression);
        }
        return argList;
    }


    /*
	 * <Parameters>  ::= EMPTY | <Formal> <MoreFormals>
     * <MoreFormals> ::= EMPTY | , <Formal> <MoreFormals
     */
	private FormalList parseParameters() {
        if(currentToken.kind != Token.Kind.IDENTIFIER) return null;
        int position = currentToken.position;
        FormalList paramList = new FormalList(position);
        Formal param = parseFormal();
        paramList.addElement(param);
        while(currentToken.kind == Token.Kind.COMMA){
            param = parseFormal();
            paramList.addElement(param);
        }
        return paramList;
    }


    /*
	 * <Formal> ::= <Type> <Identifier>
     */
	private Formal parseFormal() {
        int position = currentToken.position;
        String type = parseType();
        return new Formal(position, type, currentToken.getSpelling());
    }


    /*
	 * <Type> ::= <Identifier> <Brackets>
     * <Brackets> ::= EMPTY | [ ]
     */
     //*/ //Tia commented out cause it's an error
	private String parseType() {
	    String type = parseIdentifier();
	    if(scanner.scan().kind == Token.Kind.LBRACKET ){
	        type += "[";
	        if(!(scanner.scan().kind == Token.Kind.RBRACKET)){
	            String message = "Missing right bracket";
	            notifyErrorHandler(new Error(Error.Kind.PARSE_ERROR, filename, currentToken.position, message)); //TODO REPLACE WITH ERROR REPORTING
            }
        }
	    return type;
	}


    //----------------------------------------
    //Terminals

	private String parseOperator() {
	    return currentToken.getSpelling();
    }


    private String parseIdentifier() {
	    return currentToken.getSpelling();
	}


    private ConstStringExpr parseStringConst() {
        int position = currentToken.position;
        return new ConstStringExpr(position, currentToken.getSpelling());
	}


    private ConstIntExpr parseIntConst() { return null;}


    private ConstBooleanExpr parseBoolean() { return null;}



    /**
     * Call the register method in ErrorHandler to store the found error
     * @param error
     */
    private void notifyErrorHandler(Error error) throws CompilationException{
        this.errorHandler.register(error.getKind(), error.getFilename(),
                error.getLineNum(), error.getMessage());
        throw new CompilationException("There was an error while parsing");
    }


    public static void main(String args[]){
        ErrorHandler errorHandler = new ErrorHandler();
        Parser parser = new Parser(errorHandler);
        for(int i = 1; i < args.length; i++){ //0 is the file name Parser
            parser.parse(args[i]);
            System.out.println("Filename" + args[i] + errorHandler.getErrorList());
            errorHandler.clear(); 
        }
    }

}

